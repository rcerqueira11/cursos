Add a data source

$ lb datasource



Creating a database schema from models

LoopBack auto-migration creates a database schema based on your application’s models. In relational databases, auto-migration creates a table for each model, and a column in the table for each property in the model. Auto-migration creates tables for all models attached to a data source, including  built-in models

Once you have defined a model, LoopBack can create or update (synchronize) the database schemas accordingly, if you need to adjust the database to match the models. LoopBack provides two ways to synchronize model definitions with table schemas:

Auto-migrate: Automatically create or re-create the table schemas based on the model definitions. 
Auto-update: Automatically alter the table schemas based on the model definitions.

/// Warning: Auto-migration will drop an existing table if its name matches a model name. When tables with data exist, use auto-update to avoid data loss.


automigrate() : will drop and re-create the tables, Therefore, data will be lost
autoupdate() : Instead of dropping tables and recreating them, calculates the difference between the LoopBack model and the database table definition and alters the table accordingly

To check if database changes are required, use the isActual() method. 
It accepts a callback argument that receives a Boolean value depending on database state:

    -False if the database structure outdated
    -True when data source and database is in sync

dataSource.isActual(models, function(err, actual) {
  if (!actual) {
    dataSource.autoupdate(models, function(err, result) {
      // ...
    });
  }
});

Remotes Methods 

 Coffeeshop.bleh = function(cb){
        console.log('bleh bleh');
        var response;
        response = 'bleh!';
        cb(null, response);
    };
    Coffeeshop.remoteMethod(
        'bleh', {
            http: {
                path:'/bleh', 
                verb: 'get'
            },
            returns: {
                arg: 'bleh',
                type: 'string'
            }
        }
    );
    Coffeeshop.getName = function(shopId, cb){
        Coffeeshop.findById( shopId, function(err, instance){
            var response = "Name of coffee shop is " + instance.name;
            cb(null,response);
            console.log(response);
        });
    }
    Coffeeshop.remoteMethod(
        'getName',{
            http: {
                path: '/getname',
                verb: 'get'
            },
            accepts: {
                arg:'id',
                type:'number',
                http: {
                    source: 'query'
                }
            },
            returns: {
                arg: 'name',
                type: 'string'        
            }
        }
    );

Update boot script to add data 

server/boot/create-sample-models.js

var async = require('async');
module.exports = function(app) {
  //data sources
  var mongoDs = app.dataSources.mongoDs; // 'name' of your mongo connector, you can find it in datasource.json
  var mysqlDs = app.dataSources.mysqlDs;
  //create all models
  async.parallel({
    reviewers: async.apply(createReviewers),
    coffeeShops: async.apply(createCoffeeShops),
  }, function(err, results) {
    if (err) throw err;
    createReviews(results.reviewers, results.coffeeShops, function(err) {
      console.log('> models created sucessfully');
    });
  });
  //create reviewers
  function createReviewers(cb) {
    mongoDs.automigrate('Reviewer', function(err) {
      if (err) return cb(err);
      var Reviewer = app.models.Reviewer;
      Reviewer.create([{
        email: 'foo@bar.com',
        password: 'foobar'
      }, {
        email: 'john@doe.com',
        password: 'johndoe'
      }, {
        email: 'jane@doe.com',
        password: 'janedoe'
      }], cb);
    });
  }
  //create coffee shops
  function createCoffeeShops(cb) {
    mysqlDs.automigrate('CoffeeShop', function(err) {
      if (err) return cb(err);
      var CoffeeShop = app.models.CoffeeShop;
      CoffeeShop.create([{
        name: 'Bel Cafe',
        city: 'Vancouver'
      }, {
        name: 'Three Bees Coffee House',
        city: 'San Mateo'
      }, {
        name: 'Caffe Artigiano',
        city: 'Vancouver'
      }, ], cb);
    });
  }
  //create reviews
  function createReviews(reviewers, coffeeShops, cb) {
    mongoDs.automigrate('Review', function(err) {
      if (err) return cb(err);
      var Review = app.models.Review;
      var DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;
      Review.create([{
        date: Date.now() - (DAY_IN_MILLISECONDS * 4),
        rating: 5,
        comments: 'A very good coffee shop.',
        publisherId: reviewers[0].id,
        coffeeShopId: coffeeShops[0].id,
      }, {
        date: Date.now() - (DAY_IN_MILLISECONDS * 3),
        rating: 5,
        comments: 'Quite pleasant.',
        publisherId: reviewers[1].id,
        coffeeShopId: coffeeShops[0].id,
      }, {
        date: Date.now() - (DAY_IN_MILLISECONDS * 2),
        rating: 4,
        comments: 'It was ok.',
        publisherId: reviewers[1].id,
        coffeeShopId: coffeeShops[1].id,
      }, {
        date: Date.now() - (DAY_IN_MILLISECONDS),
        rating: 4,
        comments: 'I go here everyday.',
        publisherId: reviewers[2].id,
        coffeeShopId: coffeeShops[2].id,
      }], cb);
    });
  }
};
then run
    > npm install --save async

Define relations
Now, you’re going to define these relationships between the models.  In all there are five relations.  Once again, you’ll use the lb command, but this time you’ll use the relation sub-command (relation generator).  For each relation, enter:

$ lb relation


Introducing access controls
LoopBack applications access data through models, so controlling access to data means putting restrictions on models; that is, specifying who or what can read and write the data or execute methods on the models.   
LoopBack access controls are determined by access control lists or ACLs. For more information, see Controlling data access.

Define access controls
$ lb acl

lb acl
? Select the model to apply the ACL entry to: (all existing models)
? Select the ACL scope: All methods and properties
? Select the access type: All (match all types)
? Select the role All users
? Select the permission to apply Explicitly deny access

Now allow everyone to read reviews.
rcerqueira@debian:~/Codes/cursos/Loopsback/loopback-getting-started-II$ lb acl
? Select the model to apply the ACL entry to: Review
? Select the ACL scope: All methods and properties
? Select the access type: Read
? Select the role All users
? Select the permission to apply Explicitly grant access

Allow authenticated users to read coffeeshops; that is, if you’re logged in, you can view all coffeeshops.
rcerqueira@debian:~/Codes/cursos/Loopsback/loopback-getting-started-II$ lb acl
? Select the model to apply the ACL entry to: CoffeeShop
? Select the ACL scope: All methods and properties
? Select the access type: Read
? Select the role Any authenticated user
? Select the permission to apply Explicitly grant access

Allow authenticated users to write a review; that is, if you’re logged in, you can add a review.
rcerqueira@debian:~/Codes/cursos/Loopsback/loopback-getting-started-II$ lb acl
? Select the model to apply the ACL entry to: Review
? Select the ACL scope: A single method
? Enter the method name create
? Select the role Any authenticated user
? Select the permission to apply Explicitly grant access

Now, enable the author of a review (its “owner”) to make any changes to it.
rcerqueira@debian:~/Codes/cursos/Loopsback/loopback-getting-started-II$ lb acl
? Select the model to apply the ACL entry to: Review
? Select the ACL scope: All methods and properties
? Select the access type: Write
? Select the role The user owning the object
? Select the permission to apply Explicitly grant access


remote hooks: is simply a function that gets executed before or after a remote method


You can define two kinds of remote hooks:

beforeRemote() runs before the remote method.
afterRemote() runs after the remote method

In both cases, you provide two arguments: a string that matches the remote method to which you want to “hook” your function, and a callback function.  
Much of the power of remote hooks is that the string can include wildcards, so it is triggered by any matching method.


""" 
LoopBack also provides operation hooks, functions that are executed before or after models perform backend operations such 
as creating, saving, and updating model data, regardless of how those operations are invoked. 
In contrast, a remote hook is called only when the exact method you specify is invoked.
"""

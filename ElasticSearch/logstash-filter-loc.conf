input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        # schedule => "* * * * * *"
        use_column_value => true
        tracking_column => id
        statement => "SELECT * from company"
    }
}

filter{
    ## Many to many configurations
    if[type] =="company"{
        mutate { add_field => { "bus_model" => "" }}	
        mutate { add_field => { "capabilities" => "" }}	
        mutate { add_field => { "categories" => "" }}	
        mutate { add_field => { "group" => "" }}	
        mutate { add_field => { "partners" => "" }}	
        mutate { add_field => { "location" => "" }}	
        mutate { add_field => { "geo_loc" => "" }}	
    }
    
    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.name FROM business_model b, company_businessmodel c
                        WHERE c.business_model_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "bus_model"
    }

    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.name FROM capability b, company_capabilities c
                        WHERE c.capability_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "capabilities"
    }

    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.name FROM groupco b, company_group c
                        WHERE c.group_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "group"
    }

    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.name FROM category b, company_category c
                        WHERE c.category_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "categories"
    }

    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.name FROM partner b, company_partner c
                        WHERE c.partner_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "partners"
    }

    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.name FROM location b, company_location c
                        WHERE c.location_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "location"
    }

    jdbc_streaming {
        jdbc_connection_string => "jdbc:postgresql://localhost:5432/fintech_ecosystemloc"
        jdbc_user => "postgres"
        jdbc_password => "123456"
        jdbc_driver_library => "/home/rcerqueira/Proyectos/Fintech/dependencies/postgresql-42.1.4.jre6.jar"
        jdbc_driver_class => "org.postgresql.Driver"
	    statement => "SELECT b.geo_location FROM location b, company_location c
                        WHERE c.location_id = b.id and c.company_id = :compaid"
        parameters => { "compaid" => "[id]"}
        target => "geo_loc"
    }


    #Make an string of the json 
    mutate { update => { "bus_model" => "%{bus_model}" }}
    mutate { gsub => ["bus_model", "}", ""]}
    mutate { gsub => ["bus_model", "name=", ""]}
    mutate { gsub => ["bus_model", "{", ""]}

    mutate { update => { "capabilities" => "%{capabilities}" }}
    mutate { gsub => ["capabilities", "}", ""]}
    mutate { gsub => ["capabilities", "name=", ""]}
    mutate { gsub => ["capabilities", "{", ""]}

    mutate { update => { "group" => "%{group}" }}
    mutate { gsub => ["group", "}", ""]}
    mutate { gsub => ["group", "name=", ""]}
    mutate { gsub => ["group", "{", ""]}

    mutate { update => { "categories" => "%{categories}" }}
    mutate { gsub => ["categories", "}", ""]}
    mutate { gsub => ["categories", "name=", ""]}
    mutate { gsub => ["categories", "{", ""]}

    mutate { update => { "partners" => "%{partners}" }}
    mutate { gsub => ["partners", "}", ""]}
    mutate { gsub => ["partners", "name=", ""]}
    mutate { gsub => ["partners", "{", ""]}

    mutate { update => { "location" => "%{location}" }}
    mutate { gsub => ["location", "}", ""]}
    mutate { gsub => ["location", "name=", ""]}
    mutate { gsub => ["location", "{", ""]}

    mutate { update => { "geo_loc" => "%{geo_loc}" }}
    mutate { gsub => ["geo_loc", "}", ""]}
    mutate { gsub => ["geo_loc", "geo_location=", ""]}
    mutate { gsub => ["geo_loc", "{", ""]}
    #End many to many configurations
}


output {
    elasticsearch {
        index => "loc_ecosystem"
        document_type => "company"
        hosts => ["localhost:9200"]
        document_id => "%{id}"
    }

    stdout{
        codec => json
    }
}


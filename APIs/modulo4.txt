Usando Express

$ npm install express

si necesitamos especificar una version se puede hacer asi 

$ npm install express@4.9  #Latest version of de 4.9 branch
$ npm install express@3.15.2 


app.js
var express = require('express');

calling express function give us an application instance
var app = express() #express application instance in app variable

app.get funtion creates a route that accepts http GET request

app.get( 
	'/' url,
	function(request,response) esta funcion correra cada vez que haya un get en el root '/',
	{
		response.send('Hello world');

	}

app.listen(3000)

)

express tambien tiene
app.post
app.put
app.patch
app.delete


app.listen funtion take an optional callback, which is called once the app is ready to start taking requests 

app.listen(3000, function(){
	console.log('Listening on port 3000');
});

para correrlo usamos

node <archivo>

y para probarlo podemos verificar con curl

curl http://localhost:3000/
recibiendo como respuesta 
Hello world}

[change on code require a server restart]

express --- extends ---> node
__proto__: #inherit looks like in js
request is httpIncomingMessage.prototype
response is ServerResponse.prototype 

this extension allow us to call node funciton from our express app 

[the send funciton converts Objects and Array intoJson]

in express if we want to serialize the response int json 

para probarlo usamos curl y agregamos -i para decirle que imprima el los response headers

curl -i http://localhost:3000/blocks

HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: application/json; charset=utf-8  -> destacar que esta en json 
Content-Length: 30
ETag: W/"1e-wU0D3gXB1Mea+aJuOozsznUeBuQ"
Date: Sat, 22 Jul 2017 07:58:00 GMT
Connection: keep-alive

["Fixed","Movable","Rotating"]


json funcitons same response as send, for objects and arrays


Respond with html

HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: text/html; charset=utf-8
Content-Length: 39
ETag: W/"27-ptloeeraOk2lq4n91idW8Zasd1k"
Date: Sat, 22 Jul 2017 08:06:35 GMT
Connection: keep-alive

<ul><li>Fixed</li><li>Movable</li></ul>

this is not typicaly use in express
if you want to do rendering check server aplications as EJS or Jade

Redirectin to realive path 
we use the redirect funtion pasing the redirection path as argumente

response.redirect('/parts')

if we do a curl we get 

HTTP/1.1 302 Moved Temporarily <--
X-Powered-By: Express
Location: /parts <-- http spects 302 requieres a location header to be set 
Vary: Accept
Content-Type: text/plain; charset=utf-8
Content-Length: 28
Date: Sat, 22 Jul 2017 08:10:01 GMT
Connection: keep-alive

Found. Redirecting to /parts


we need to make it permanent redirect
you can pass the status code as the 
first parameter

response.redirect(301,'/parts')

if we curl 
HTTP/1.1 301 Moved Permanently
X-Powered-By: Express
Location: /parts
Vary: Accept
Content-Type: text/plain; charset=utf-8
Content-Length: 40
Date: Sat, 22 Jul 2017 08:14:14 GMT
Connection: keep-alive

Moved Permanently. Redirecting to /parts

says move permanently


MIDDELWARE

rich javascript applciation 
allows more interactive experience on the web


client -> Initial Reques -> server
client <- index.html is returned <- server
client -> AJAX request -> server
client <- JSON with data is returned <- server

and the cliente renders 


to serve index.html from express we create 
the get root and in the response we use sendFile

response.sendFile(__dirname + '/public/index.html')

__dirname = returns current path of the application 

we causes tha the index.html be serve

app.get( '/',function(request,response){
		response.sendFile(__dirname + '/public/index.html')
	});


another way to write this functionality is with the express static middelware

app.use(express.static('public'))



middelware 
are functions added to the stack functions executed sequentially that access request and response 

middelwares can do validation, authentication, data parsing etc 
middelware A [validation]
middelware B [authentication]
middelware C [data parsing]
			 [route]


when next is called, process move to the next middelware [app.use]

app.use(function(request,response,next_function){
	...
	next();
});

we use next() to the next middelware an so on, until we want to response to the client
this can be done by another middelware 

app.use(function(request,response,next){
	...
	respond.send('done');
	if we use a next(); here it will be dead code becouse of the send before it, this will get some source rare errors
});


[source code from static dont use ;]

LOGGER MIDDELWARE [CREATE OUR OWN]

we create logger.js
and we create a funtion in it 
to make this function accesible for all outside we assing it to module.export in order to export it as a Node module and make it accessible forom other files

[this module system follows the CommonJs specifications]

to know when it finished
ya que los middelware son secuenciales
podemos usar el listener

response.on('finish',function(){
	
});

to use it in app.js
./ means is a local module
var logger = require('./logger');
app.use(logger);

Consejo para logger usando morgan

https://github.com/expressjs/morgan

READING FROM URL 

we want to be able to limit the number of results returned 

GET to /blocks?limit=1

query string parameters are added to request.query

can be access from a route

// slice is a native js function it takes two argumente
		// first is where the straction begans
		// second is where it ends
response.json(block.slice(0,request.query.limit));

if we want to fetch the description
we can use meaningful Urls

GET to /block/Fixed

answer = using dinamic routes
dynamic routes allow u to define name arguments that are part of the url path

'/block/:name'

express create de name parameter in 
request.params object
request.params.name

to add information to the blocks
we move from js array to js object

si hay un name que no existe es necesario realizar una validacion de esto y dar un feedback al usuario de que esta pasando 

routes don't match all cases Fixed != fixed
so we need to normalize the request parameter

NORMALIZE REQUEST PARAMETER

var name = request.params.name
	// we conver the first character to upper case and the remaining char to lower
	var block= name[0].toUpperCase() + name.slice(1).toLowerCase(); 

	var description = blocks[block]

normalize request multiple url same normalize
to avoid duplication we use another express funtion
 we make a middelware funciton
app.param('name', function(request,response,next){
	var name = request.params.name;
	var block = name[0].toUpperCase() + name.slice(1).toLowerCase();

	request.blockName  = block;
});

creamos request.blockName  = block; para que block pueda se accedido por otras rutas de la aplicacion

WE NEED THE NORMAL URL '/blocks' AND THE DYNAMIC '/blocks:name'


if we wan tto show just a key
Object.keys returns an array wit the objects properties

app.param() =  function maps placeholders to callback functions

POST

POST to /blocks
name= "Flying"
description = "able to move through air"

201 Created "Flying"

creamos el formulario y aÃ±adimos un listener al form element on submit 

before we can read data that is send form clients we need to install the body-parser middelware

npm install body-parser

luego lo agregamos

var bodyParser = require('body-parser');
var parseUrlencode= bodyParser.urlencode({ extended: false})

extended: false => this option force to use 
the node native queryparse module querystring

the return value ob bodyParse is a middelware funtion who is stored in parseUrlencode

app.post('/blocks',parseUrlencode, function(request,response){
	
});

routes can take multiple handles as argumens and will call them sequentialy

using multiple routes handeles is useful for re-using middleware tha load resouses, performa validation, authentications, etc..

app.post('/blocks',parseUrlencode, function(request,response){
	var newBlock = request.body;
	blocks[newBlock.name] = newBlock.description;
	response.status(201).json(newBlock.name);
});

DELETE

DELETE /block/Flying

200 OK

creamos el evento

$('.block-list').on('click','a[data-block]',function(event){
// primero agregamos una confirmacion
	if (!confirm('Are you sure?')){
		return false;
	}
	// the link element that was clicked
	var target = $(event.currentTarget);

	$.ajax({
		type: 'DELETE',
		//reads the block name form the link's data-block attribute
		url: '/blocks/' +target.data('block')
	}).done(function(){
		target.parents('li').remove();
	});

});

luego en app.js

creamos el delete

app.delete('/blocks/:name',function(request,response){
	
});
pypi.python.org/pypi/Flask-Bootstrap

to the route accept methods we use 

@app.route('/add', methods = ['GET','POST'])

some of request objects attributes
form: Form data from post or put requests
args: contents of the query string. (The part in the url after the quesiton mark
cookies: cookies transmitted with the request
headers: the incoming request headers as a dictionary like objects
files: Files uploaded as part of a POST or PUT request
method: the current reques method (POST, GET etc)

session: remember data between requests

Using the session
- need to set Flask.secret_key for creating cookies
- store values in it like a dict

Flashing messages: to retrieve a message to the user 
- Use flash()
- Available in template throught get_flashed_messages()

to use secret_key

generamos una key y luego

app.config['SECRET_KEY'] = '\x05\xa5\xa6\xb8\xe8\x06\x0f\xa9\x98\xf4\xf8\xe5H\x92j9\xab\x16\xe5\xe0\xa8\x9e\xb9\x92'

show flash message
<article class="flashes">
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <ul>
            {% for message in messages %}
                <li>{{message}}</li>
            {% endfor %}                    
            </ul>
        {% endif %}
    {% end with %}
        
</article>


for 

jinja defines a llop variables inside for 

with defines a variables block 
{% with var = expresion %} ... {% endwith %}


to use wtfforms we installe them first
pip install flask-wtf

then we need to import them 

from flask_wtf import Form
from wtforms.fields import StringField
from flask.ext.wtf.html5 import URLField
from wtforms.validators import DataRequired, url 

to keep clean and mantaniable the code we could create a 
forms.py file


form.validate_on_submit()
valida el request http y si los datos son correctos

return render_template('add.html', form = form)

form to use it to generate html

render fields WTForms in Templates
keyword argument will become HTML attributes
{{ form.url(class="fancy") }}


Esto se hace para no tener que hace el html por cada input field
para que el codigo sea mas mantenible
{% macro render_field(field) %}
    <tr {% if field.error  %} class="error" {% endif %}>
        <td>{{field.label}}</td>
        aqui pasamo any remining keywords arguments to the field 
        <td>{{ field(**kwargs)|safe}}</td>
        |safe = jinja will not try to scape any espcial char in this output
    </tr>
    <tr>
        <td></td>
        <td>
            <ul>
                {% for error in field.errors %}
                    <li>{{error}}</li>
                {% endfor %}
            </ul>
        </td>
    </tr>
{% endmacro %}

para usar los macros hay que importarlos primero 

{% from "form_macros.html" import render_field %}

resources
list of control structures
jinja.pocoo.orf/docs/dev/templates/#list-of-control-structures

Flask-wtf
https://flask-wtf.readthedocs.io/en/stable/
http://goo.gl/EW1hdn

wtforms
http://goo.gl/ulTg3Z




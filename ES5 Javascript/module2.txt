#Declaration with let

function loadProfiles(userNames){
	if (userNames.length > 3){
		var loadingMessage = "This might take a while...";
		_displaySpinner(loadingMessage);
	} else {
		var flashMessage = "Loading Profiles";
		_displayFlash(flashMessage);
	}
	//... fetch names and build sidebar

	console.log(flashMessage); -> undefined
}

does not have undeclaration error
porque js mueve todo los var arriba luego de la funcion esto es conocido como hoisting

function loadProfiles(userNames){
	var loadingMessage, flashMessage

to fix this behavior using a new keyword let

let variables are scoped to the nearest block and are not hoisted
block if any curly braces, like if,else,for,while, etc..

function loadProfiles(userNames){
	if (userNames.length > 3){
		let loadingMessage = "This might take a while...";
		_displaySpinner(loadingMessage);
	} else {
		let flashMessage = "Loading Profiles";
		_displayFlash(flashMessage);
	}
	//... fetch names and build sidebar

	console.log(flashMessage); -> ReferenceError: flashMessage is not defined
}

usign let vriables are trapped inside ther respective if and else blocks


#LET IN FOR LOOPS

var is th reason behind a popular gotcha in for loops


function loadProfiles(userNames){
	

	for(var i in userNames) {
		_fetchProfile("/users/" + userNames[i],function(){
			console.log("Fetched for ", userNames[i])
		})
	}
}

loadProfiles(["Sam","Tyler","Brook","Alex"]);

return ->

Fetched for Alex
Fetched for Alex
Fetched for Alex
Fetched for Alex

why this happend

var i is hoisted and share across each itetation of the loop

_fetchProfile is called 4 times 

before any of the callback are invoked

i is incremete on each interation 
after _fetchProfile has been called 4 time the callback executes 

#solution replace var with let in our for loop


function loadProfiles(userNames){
	

	for(let i in userNames) {
		_fetchProfile("/users/" + userNames[i],function(){
			console.log("Fetched for ", userNames[i])
		})
	}
}

using let a i variables is create on each iteration and there is not share in callbacks 	

let decorations are not hoisted 	

each callback functions now holds a reference to their own version of i 

loadProfiles(["Sam","Tyler","Brook","Alex"]);

return ->

Fetched for Sam
Fetched for Tyler
Fetched for Brook
Fetched for Alex

#let cannot be redeclared 

let variables can be reassigned, but cannot be redeclared within the same scope

let flashMessage = "Hello";
flashMessage = "Goodbye";
-> ok

let flashMessage = "Hello";
let flashMessage = "Goodbye";
-> TypeError: identifier 'flashMessage' has already been declared

but we can declare a new let in another/different scope 

let flashMessage = "Hello";

function loadProfiles(userNames){
	let flashMessage = "Loading profiles";
	return flashMessage;
}



#USING CONST

#magin numbres : is a literal value without a clear mening in this case 3 does not tell much about it 


function loadProfiles(userNames){
	if (userNames.length > 3){
		//..
	} else {
		//..
	}

	if (someValue > 3){
		//..
	} 
}
we dont know for what is the first 3 and if it has relation to the second 

hard to read an hard to mantain 

solution : use const -> create read-only named constants


function loadProfiles(userNames){

	const MAX_USERS = 3;

	# constants does not chanege
	MAX_USERS = 10; -> ~sintax error

	if (userNames.length > MAX_USERS){
		//..
	} else {
		//..
	}

	const MAX_REPLIES = 3;

	if (someValue > MAX_REPLIES){
		//..
	} 

}

#constans requires an intial value

const MAX_USERS; -> SyntaxError: Unexpected token
MAX_USERS = 10;

# constants are block scope means is not hoisted to the top of the funcions



function loadProfiles(userNames){

	const MAX_USERS = 3;

	if (userNames.length > MAX_USERS){
		const MAX_REPLIES = 3;
		//..
	} else {
		//..
	}

	console.log(MAX_REPLIES); -> ReferenceError, MAX_REPLIES is not defined

}

# in most cases let and const with behave very similary consider the semantic to chosse

let loadingMessage ="This might take a while..";
let currentAge = 50;
let totalCost = cost + tax;
-> use let when variables could be reassigned new values

const MAX_USERS = 3;
const SEPARATOR = "%%";
const ALLOW_EDIT = false;
-> use consta when new variables are not expecte to be reassigned new values 

 
#FUNCTIONS

#issues with flexible funtion arguments

loadProfiles(); or loadProfiles(undefinded); -> TypeError: cannot read property 'lenght' of undefined

js lo permite pero vemos el error por el userNames.lenght


# manual argumet checks don't scale wll

function loadProfiles(userNames){
	let names = typof username !== "undefined" ? userNames: [];
	#works but doesn't scale well to multiple arguments
	let namesLength = names.length

#solution: use default parameter values

function loadProfiles(userNames = []){
	let namesLength = userNames.length;
	console.log(namesLength);
}

loadProfiles(); or loadProfiles(undefinded); -> 0

#The options Object

setPageThread("New Version out Soon!",{
	popular : true,
	expires: 1000,
	activeClass: "is-page-thread"
});

option object with 3 properties

function setPageThread(name, options = {}){
	let popular = options.popular;
	let expires = options.expires;
	let activeClass = options.activeClass;
}

the options object makes ir hard to know what options a function accepts, unclear just by looking at its signature 

#solution name paramether for optional setting makes it easier to understan how a function should be invoked 


function setPageThread(name, { popular, expires, activeClass }){
	console.log("Name: ", name)
	console.log("Popular: ", popular)
	console.log("Expires: ", expires)
	console.log("Active: ", activeClass)
	#local variables
}
now we know which arguments are available

if we call the function with all argument everything go ok

#omitting certain arguments on call

if we call the function we less paramethers

setPageThread("New Version out Soon!",{
	popular: true;
})

return ->

Name: New Version out Soon!
Popular: true
Expires: undefined
Active: undefined

#don't omit all named arguments on call

setPageThread("New Version out Soon!");
return -> error, the error depends 

#solution setting a default for named parameters

function setPageThread(name, { popular, expires, activeClass } = {}){
	console.log("Name: ", name)
	console.log("Popular: ", popular)
	console.log("Expires: ", expires)
	console.log("Active: ", activeClass)
	#local variables
}

now we can call this without his second parameter

setPageThread("New Version out Soon !");

return -> 
Name: New Version out Soon!
Popular: undefined
Expires: undefined
Active: undefined


#REST PARAMETER, SPREAD OPERATOR, ARROW FUNCTION

#adding tags to a thread

"funtions with variable list of arguments

displayTags("songs");
displayTags("songs", "lyrics");
displayTags("songs", "lyrics","bands");
-> variadic functios can accept any numbers of arguments 

#issues with the arguments object

like array but not an array 

function _displayTags(){
	for(let i in arguments){
		let tag = arguments[i];
		_addToTopic(tag); 
	}
}
issues:
	- hard to tell which parameter this function expects
	-where this arguments come from?

if we add an argument 

function _displayTags(targetElement){
	
	let target = _findElement(targetElement);

	for(let i in arguments){
		let tag = arguments[i];
		_addToTopic(tag); 
	}
}

-> we'll break the loop, since the first argument is no longer a tag

solution: using rest parameters allows to represent an indefinite nubres of argumens as an array. this way, changes to function signature are less likely to break code


function _displayTags(...tags){
	for(let i in tags){
		let tag = tags[i];
		_addToTopic(tag); 
	}
}

#must always go last
function _displayTags(targetElement, ...tags){
	
	let target = _findElement(targetElement);

	for(let i in tags){
		let tag = tags[i];
		_addToTopic(target,tag); 
	}
}

Splitting arrays into individiual Arguments

we need to convert an Array into individual arguments upon a function call

getRequest("/topics/17/tags", function(data){
	let tags = data.tags;
	displayTags(tags); -> expect individual arguments no an array
})

how can we convert arrays ito individual elements o a function call?

solution: spread operator (...tags) split an array argument into individual elements
used in function INVOCATION no function DEFINITION
displayTags(...tags) = displayTags(tag,tag,tag) 


Rest an Spread look the same

Rest parameter is used in funcition defnition
Spread is use in function invocation

#From functions to objects

js objects can help us with the encapsulation, organization and testability of our code.

we want to convert the code into something like this 

let tagComponent = new TagComponent(targetDiv, "/topics/17/tags");
tagComponent.render();

lets see how we can implement TagComponent function!


function TagComponent(target, urlPath){
	this.targetElement = target;
	this.urlPath = urlPath;
}

TagComponent.prototype.render = function(){
	getRequest(this.urlPath, function(data){
		//..
		let tags = data.tags;
		displayTags(this.targetElement, ...tags); -> this is wrong becouse of the scope of the TagComponent is not the same as the scope of the anonymous funciton this.targetElement = undefined
	});
}

to preserve the scope we can use the Arrow Function =>
: lexical binding = the bind to the scope from where they are define, not where the run 

TagComponent.prototype.render = function(){
	getRequest(this.urlPath, (data) => {
		//..
		let tags = data.tags;
		displayTags(this.targetElement, ...tags); 
	});
}